/** Function: boardToVector.c
 * Author: Justin Lee 
 * Function: allocates a vector 
 * */
#include "fenToBoardState.h"
#include "boardstate.h"
#include <malloc.h>
#include "boardToVector.h"
void boardToVector(BSTATE *board, int *vector)
{
	vector[0] = board->WKCFlag;
	vector[1] = board->WQCFlag;
	vector[2] = board->BQCFlag;
	vector[3] = board->WKCFlag;
	vector[4] = board->sidetomove;
	/*we have flags created to determine if black or white
	 */

	/*white is 1, black is 0 */
	int shift = 5; /** shifts array by 5 b/c first 5 inputs
					 are used up */
	int piece = 0;
	for(int color = 1; color <= 2; color++)
	{
		for(int rank = 1; rank <= 6; rank++)
		{
			for(int i = 0; i < 8; i++)
			{
				for(int j = 0; j < 8; j++)
				{
					piece = board->boardarray[i][j];
					vector[shift+(rank)*(color)*(i*8 + j)] = 0;
					if(piece/10 == (color-1) && piece%10 == rank)
					{
							printf("Shifts here  i is %d j is %d!!!\n ", i, j);
							vector[shift+(rank)*(color)*(i*8 + j)] = 1;
					}
				}
			}
		}
	}


	for(int i = 0; i < 8; i++)
	{
		for(int j = 0; j < 8; j++)
		{
			printf("%d ", vector[5+i*8+ j]);
		}
		printf("\n");
	}
	printf("\n");
	return;	
}

int main()
{
	BSTATE test;
	fenToBoardState("rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1", &test);
	int *vectorTest = malloc(sizeof(int)*773);
	boardToVector(&test, vectorTest);
	/*testing vector */
/*
za	for(int i = 0; i < 8; i++)
	{
		for(int j = 0; j < 8; j++)
		{
			printf("%d ", test.boardarray[i][j]);
		}
za		printf("\n");
	}
*/
	for(int i = 0; i < 8; i++)
	{
		for(int j = 0; j < 8; j++)
		{
			printf("%d ", vectorTest[5+i*8+ j]);
		}
		printf("\n");
	}
	return 0;	
}


